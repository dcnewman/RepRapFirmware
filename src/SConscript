import os
import re
import glob
from os.path import dirname, basename, join
from datetime import datetime

import sys
sys.path.append('../../scons_tools')
from platforms import *
from libraries import *

# Platform type; default to 'duet'

platform = ARGUMENTS.get('platform', 'duet').lower()

if not (platform in platforms):
    print "Platform " + platform + " is not currently supported"
    exit()

flags = []
if platform == 'duet':
  arch              = 'sam3x8e'   # platform architecture 
  platform_dir      = 'Duet'      # platform specific sources in 'src/' + platform_dir
  variant_name      = 'duet'      # variant directory in CoreNG source tree
  coreng_libdir     = 'SAM3X8E'   # CoreNG build directory with libCoreNG.a
elif platform == 'ng':
  arch              = 'sam4e8e'
  platform_dir      = 'duetNG'
  variant_name      = 'duetNG'
  coreng_libdir     = 'SAM4E8E'
  flags.append('-DCORE_NG')
  flags.append('-DDUET_NG')
elif platform == 'radds':
  arch              = 'sam3x8e'
  platform_dir      = 'RADDS'
  variant_name      = 'duet'
  coreng_libdir     = 'RADDS'
else:
  raise Exception('Unrecognized platform ' + platform)

if arch == 'sam3x8e':
  mcpu = 'cortex-m3'
elif arch == 'sam4e8e':
  mcpu = 'cortex-m4'

target_name = 'RepRapFirmware-' + platform
hex_name = target_name + '.bin'
elf_name = target_name + '.elf'
map_name = target_name + '.map'

# Get platform-specific information

features = platforms[platform]

# Arduino path information from os.environ.  Likely set in SConstruct

coreng_home = os.environ['CORENG_HOME']
gccarm_bin = os.environ['GCCARM_BIN']
bossac_path = os.environ['BOSSAC_PATH']

# Pins file
if 'pins' in features:
  pinfile = features['pins']
else:
  pinfile = join(platform_dir, 'Pins_' + platform + '.h')

# Programming port (for upload function)
if 'program_port' in features:
  program_port = features['program_port'].lower()
  if program_port == 'programming':
    native = 'false'
  else:
    native = 'true'
else:
  native = 'true'

# Platform specific #defines
if 'defines' in features:
  for d in features['defines']:
    if d[0] != '-':
      flags.append('-D' + d)
    else:
      flags.remove('-D' + d[1:])

# Extra defines from the command line
defines = ARGUMENTS.get('defines', '')
if defines != '':
  defines = defines.replace(' ', '').split(',')
  for d in defines:
    if d != '':
      flags.append('-D' + d)

# Local libraries to use from src/Libraries/
if 'libraries' in features:
  local_libraries = features['libraries']
else:
  local_libraries = []

# And sublibraries to use from the CoreNG library
if 'arduino_libraries' in features:
  arduino_libraries = features['arduino_libraries']
else:
  arduino_libraries = []

# Build up our list of include paths from the board's
# list of required local libraries.  Later, we'll walk
# local_libraries again to find our source dependencies

include_paths = [ '.', platform_dir]

# Add in the include paths for the cited Arduino libraries (no op for 'core')
for lib in arduino_libraries:
  append_arduino_path(lib, include_paths, platform, coreng_home)

# Add in the include paths for Arduino libraries needed by local libraries
for lib in local_libraries:
  if lib in build_libraries:
    if not (build_libraries[lib][4] is None):
      alibs = build_libraries[lib][4]
      for alib in alibs:
        append_arduino_path(alib, include_paths, coreng_home)

# Now add in the include paths for local libraries
for lib in local_libraries:
  if lib in build_libraries:
    append_paths(include_paths, lib, platform_dir)


######
#
# Firmware upload method and psuedo-target (optional target) "upload"
#
def Upload(env, source, name="upload"):

  def tickle(target, source, env):
    import serial
    import time

    port = env['PORT']
    print 'Tickling the bootloader via port ' + port
    try:
      with serial.Serial(port, baudrate=1200) as sd:
        sd.setDTR(1)
        time.sleep(0.5)
        sd.setDTR(0)
    except serial.SerialException, e:
      return str(e)

    if 'NATIVE' in env:
      native = env['NATIVE'].lower()
    else:
      native = 'true'

  cmd = env['UPLOAD']
  cmd = cmd.replace('$NATIVE', native)
  cmd = cmd.replace('$PORT', env['PORT'].replace('/dev/', ''))
  target = env.Alias(name, source, [tickle, cmd])
  AlwaysBuild(target)
  return target


AddMethod(Environment, Upload)

# Initialize an environment

env = Environment(tools=['default', 'ar', 'g++', 'gcc'],
                  CPPPATH=include_paths,
                  LIBPATH=['.'],
                  VARIANT_DIR=join('build', platform))

# Compiler flags shared by C and C++
env.Replace(CCFLAGS=[
    '-c',
    '-Wall',
    '-mthumb',
    '-ffunction-sections',
    '-fdata-sections',
    '-nostdlib',
    '--param', 'max-inline-insns-single=500',
    '-mcpu=' + mcpu,
    '-Dprintf=iprintf',
    '-D__' + arch.upper() + '__',
    '-DPLATFORM=' + platform_dir,
    '-DDATE=\'"' + datetime.now().strftime('%y/%m/%d') + '"\'' ])

if flags != []:
  env.Append(CCFLAGS=flags)

# C compiler flags
env.Replace(CFLAGS=[
    '-O3',
    '-std=gnu99' ])

# C++ flags
env.Replace(CXXFLAGS=[
    '-fno-threadsafe-statics',
    '-fno-rtti',
    '-fno-exceptions',
    '-O2',
    '-std=gnu++11' ])

env.SetDefault(CORENG_HOME=coreng_home)
env.SetDefault(GCCARM_BIN=gccarm_bin)
env.SetDefault(BOSSAC_PATH=bossac_path)

env.Replace(RANLIB="$GCCARM_BIN/arm-none-eabi-ranlib")
env.Replace(CC="$GCCARM_BIN/arm-none-eabi-gcc")
env.Replace(CXX="$GCCARM_BIN/arm-none-eabi-g++")
env.Replace(AR="$GCCARM_BIN/arm-none-eabi-ar")
env.Replace(ARFLAGS="rcs")
env.Replace(ASFLAGS="-c -g -x assembler-with-cpp")
env.Replace(SIZE="$GCCARM_BIN/arm-none-eabi-size")
env.Replace(OBJCOPY="$GCCARM_BIN/arm-none-eabi-objcopy")
env.Replace(ELF="$GCCARM_BIN/arm-none-eabi-gcc")
env.Replace(LD="$GCCARM_BIN/arm-none-eabi-gcc")

env.Append(BUILDERS={'Elf': Builder(
    action=
    '"$GCCARM_BIN/arm-none-eabi-gcc" -Os -Wl,--gc-sections -mcpu=' + mcpu + ' "-T$CORENG_HOME/variants/' + variant_name + '/linker_scripts/gcc/flash.ld" "-Wl,-Map,$VARIANT_DIR/RepRapFirmware.map"  -o $TARGET $_LIBDIRFLAGS -mthumb -Wl,--cref -Wl,--check-sections -Wl,--gc-sections -Wl,--entry=Reset_Handler -Wl,--unresolved-symbols=report-all -Wl,--warn-common -Wl,--warn-section-align -Wl,--warn-unresolved-symbols -Wl,--start-group $CORENG_HOME/' + coreng_libdir + '/cores/arduino/syscalls.o $_LIBFLAGS $SOURCES  -Wl,--end-group -lm -gcc')
                    })

env.Append(BUILDERS={'Hex': Builder(
    action='"$GCCARM_BIN/arm-none-eabi-objcopy" -O binary  $SOURCES $TARGET',
    suffix='.hex',
    src_suffix='.elf')})

env.Replace(
    UPLOAD='"$BOSSAC_PATH" --port=$PORT -U $NATIVE -e -w -v -b $SOURCES -R')

env['map_name'] = map_name
env['NATIVE'] = native

# Work on our list of local source dependencies

exclude_srcs = []
srcs = Glob('*.cpp', exclude=exclude_srcs) + \
   Glob('*.c', exclude=exclude_srcs) + \
   Glob(os.path.join(platform_dir, '*.cpp'), exclude=exclude_srcs) + \
   Glob(os.path.join(platform_dir, '*.c'), exclude=exclude_srcs)

# And our list of local library dependencies

for lib in local_libraries:
  subdirs = get_lib_dirs(lib, platform_dir)
  for subdir in subdirs:
    srcs += Glob(os.path.join(subdir, '*.cpp'))
  for subdir in subdirs:
    srcs += Glob(os.path.join(subdir, '*.c'))

# Declare these sources as dependencies

objs = env.Object(srcs)

# Add the Pin_<platform>.h file to the dependency list

env.Depends(objs, pinfile)

# Now start our list of library dependencies
# Head the list of with the objects built from our local source dependencies

depends = [objs]

# Finally, the .elf and .bin files
env.Elf(elf_name,
        depends,
        LIBS=['CoreNG'],
        LIBPATH=[os.path.join(coreng_home, coreng_libdir)])
hex = env.Hex(hex_name, elf_name)

# Add an optional 'upload' build target

port = ARGUMENTS.get('port', '')
env['PORT'] = port
env.Upload(hex)
